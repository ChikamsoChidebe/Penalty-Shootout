/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Shootout {
  export type MatchStruct = {
    creator: AddressLike;
    opponent: AddressLike;
    token: AddressLike;
    stake: BigNumberish;
    createdAt: BigNumberish;
    joinDeadline: BigNumberish;
    commitDeadline: BigNumberish;
    revealDeadline: BigNumberish;
    state: BigNumberish;
    feeBps: BigNumberish;
    creatorCommitted: boolean;
    opponentCommitted: boolean;
    creatorRevealed: boolean;
    opponentRevealed: boolean;
    winner: AddressLike;
    creatorCommitment: BytesLike;
    opponentCommitment: BytesLike;
    creatorChoices: BigNumberish;
    opponentChoices: BigNumberish;
  };

  export type MatchStructOutput = [
    creator: string,
    opponent: string,
    token: string,
    stake: bigint,
    createdAt: bigint,
    joinDeadline: bigint,
    commitDeadline: bigint,
    revealDeadline: bigint,
    state: bigint,
    feeBps: bigint,
    creatorCommitted: boolean,
    opponentCommitted: boolean,
    creatorRevealed: boolean,
    opponentRevealed: boolean,
    winner: string,
    creatorCommitment: string,
    opponentCommitment: string,
    creatorChoices: bigint,
    opponentChoices: bigint
  ] & {
    creator: string;
    opponent: string;
    token: string;
    stake: bigint;
    createdAt: bigint;
    joinDeadline: bigint;
    commitDeadline: bigint;
    revealDeadline: bigint;
    state: bigint;
    feeBps: bigint;
    creatorCommitted: boolean;
    opponentCommitted: boolean;
    creatorRevealed: boolean;
    opponentRevealed: boolean;
    winner: string;
    creatorCommitment: string;
    opponentCommitment: string;
    creatorChoices: bigint;
    opponentChoices: bigint;
  };
}

export interface ShootoutInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMMIT_DURATION"
      | "JOIN_TIMEOUT"
      | "MAX_FEE_BPS"
      | "REVEAL_DURATION"
      | "ROUNDS"
      | "cancelMatch"
      | "claim"
      | "commitChoices"
      | "createMatch"
      | "feeBps"
      | "getCurrentTimestamp"
      | "getMatch"
      | "getPlayerMatches"
      | "joinMatch"
      | "matchCounter"
      | "matches"
      | "owner"
      | "pause"
      | "paused"
      | "playerMatches"
      | "protocolFees"
      | "renounceOwnership"
      | "revealChoices"
      | "setFee"
      | "settleMatch"
      | "transferOwnership"
      | "unpause"
      | "verifyCommitment"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChoicesCommitted"
      | "ChoicesRevealed"
      | "FeeUpdated"
      | "FeesWithdrawn"
      | "MatchCancelled"
      | "MatchCreated"
      | "MatchJoined"
      | "MatchSettled"
      | "OwnershipTransferred"
      | "Paused"
      | "PrizeClaimed"
      | "RevealWindowStarted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMMIT_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JOIN_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVEAL_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROUNDS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "commitChoices",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMatch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeBps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerMatches",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerMatches",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealChoices",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyCommitment",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMIT_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "JOIN_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVEAL_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROUNDS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitChoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealChoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace ChoicesCommittedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    player: AddressLike,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    matchId: bigint,
    player: string,
    commitment: string
  ];
  export interface OutputObject {
    matchId: bigint;
    player: string;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChoicesRevealedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    player: AddressLike,
    choices: BigNumberish
  ];
  export type OutputTuple = [matchId: bigint, player: string, choices: bigint];
  export interface OutputObject {
    matchId: bigint;
    player: string;
    choices: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchCancelledEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    canceller: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    matchId: bigint,
    canceller: string,
    reason: string
  ];
  export interface OutputObject {
    matchId: bigint;
    canceller: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchCreatedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    creator: AddressLike,
    token: AddressLike,
    stake: BigNumberish,
    joinDeadline: BigNumberish
  ];
  export type OutputTuple = [
    matchId: bigint,
    creator: string,
    token: string,
    stake: bigint,
    joinDeadline: bigint
  ];
  export interface OutputObject {
    matchId: bigint;
    creator: string;
    token: string;
    stake: bigint;
    joinDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchJoinedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    opponent: AddressLike,
    commitDeadline: BigNumberish
  ];
  export type OutputTuple = [
    matchId: bigint,
    opponent: string,
    commitDeadline: bigint
  ];
  export interface OutputObject {
    matchId: bigint;
    opponent: string;
    commitDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchSettledEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    winner: AddressLike,
    creatorScore: BigNumberish,
    opponentScore: BigNumberish
  ];
  export type OutputTuple = [
    matchId: bigint,
    winner: string,
    creatorScore: bigint,
    opponentScore: bigint
  ];
  export interface OutputObject {
    matchId: bigint;
    winner: string;
    creatorScore: bigint;
    opponentScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeClaimedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [matchId: bigint, claimer: string, amount: bigint];
  export interface OutputObject {
    matchId: bigint;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevealWindowStartedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    revealDeadline: BigNumberish
  ];
  export type OutputTuple = [matchId: bigint, revealDeadline: bigint];
  export interface OutputObject {
    matchId: bigint;
    revealDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Shootout extends BaseContract {
  connect(runner?: ContractRunner | null): Shootout;
  waitForDeployment(): Promise<this>;

  interface: ShootoutInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMMIT_DURATION: TypedContractMethod<[], [bigint], "view">;

  JOIN_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  MAX_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  REVEAL_DURATION: TypedContractMethod<[], [bigint], "view">;

  ROUNDS: TypedContractMethod<[], [bigint], "view">;

  cancelMatch: TypedContractMethod<
    [matchId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[matchId: BigNumberish], [void], "nonpayable">;

  commitChoices: TypedContractMethod<
    [matchId: BigNumberish, commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  createMatch: TypedContractMethod<
    [token: AddressLike, stake: BigNumberish],
    [bigint],
    "payable"
  >;

  feeBps: TypedContractMethod<[], [bigint], "view">;

  getCurrentTimestamp: TypedContractMethod<[], [bigint], "view">;

  getMatch: TypedContractMethod<
    [matchId: BigNumberish],
    [Shootout.MatchStructOutput],
    "view"
  >;

  getPlayerMatches: TypedContractMethod<
    [player: AddressLike],
    [bigint[]],
    "view"
  >;

  joinMatch: TypedContractMethod<[matchId: BigNumberish], [void], "payable">;

  matchCounter: TypedContractMethod<[], [bigint], "view">;

  matches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        creator: string;
        opponent: string;
        token: string;
        stake: bigint;
        createdAt: bigint;
        joinDeadline: bigint;
        commitDeadline: bigint;
        revealDeadline: bigint;
        state: bigint;
        feeBps: bigint;
        creatorCommitted: boolean;
        opponentCommitted: boolean;
        creatorRevealed: boolean;
        opponentRevealed: boolean;
        winner: string;
        creatorCommitment: string;
        opponentCommitment: string;
        creatorChoices: bigint;
        opponentChoices: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  playerMatches: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  protocolFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revealChoices: TypedContractMethod<
    [matchId: BigNumberish, choices: BigNumberish, salt: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[newFeeBps: BigNumberish], [void], "nonpayable">;

  settleMatch: TypedContractMethod<
    [matchId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  verifyCommitment: TypedContractMethod<
    [
      choices: BigNumberish,
      salt: BigNumberish,
      player: AddressLike,
      commitment: BytesLike
    ],
    [boolean],
    "view"
  >;

  withdrawFees: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMMIT_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "JOIN_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REVEAL_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROUNDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelMatch"
  ): TypedContractMethod<[matchId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[matchId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitChoices"
  ): TypedContractMethod<
    [matchId: BigNumberish, commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMatch"
  ): TypedContractMethod<
    [token: AddressLike, stake: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "feeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMatch"
  ): TypedContractMethod<
    [matchId: BigNumberish],
    [Shootout.MatchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerMatches"
  ): TypedContractMethod<[player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "joinMatch"
  ): TypedContractMethod<[matchId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "matchCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "matches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        creator: string;
        opponent: string;
        token: string;
        stake: bigint;
        createdAt: bigint;
        joinDeadline: bigint;
        commitDeadline: bigint;
        revealDeadline: bigint;
        state: bigint;
        feeBps: bigint;
        creatorCommitted: boolean;
        opponentCommitted: boolean;
        creatorRevealed: boolean;
        opponentRevealed: boolean;
        winner: string;
        creatorCommitment: string;
        opponentCommitment: string;
        creatorChoices: bigint;
        opponentChoices: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerMatches"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealChoices"
  ): TypedContractMethod<
    [matchId: BigNumberish, choices: BigNumberish, salt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settleMatch"
  ): TypedContractMethod<[matchId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyCommitment"
  ): TypedContractMethod<
    [
      choices: BigNumberish,
      salt: BigNumberish,
      player: AddressLike,
      commitment: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChoicesCommitted"
  ): TypedContractEvent<
    ChoicesCommittedEvent.InputTuple,
    ChoicesCommittedEvent.OutputTuple,
    ChoicesCommittedEvent.OutputObject
  >;
  getEvent(
    key: "ChoicesRevealed"
  ): TypedContractEvent<
    ChoicesRevealedEvent.InputTuple,
    ChoicesRevealedEvent.OutputTuple,
    ChoicesRevealedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "MatchCancelled"
  ): TypedContractEvent<
    MatchCancelledEvent.InputTuple,
    MatchCancelledEvent.OutputTuple,
    MatchCancelledEvent.OutputObject
  >;
  getEvent(
    key: "MatchCreated"
  ): TypedContractEvent<
    MatchCreatedEvent.InputTuple,
    MatchCreatedEvent.OutputTuple,
    MatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MatchJoined"
  ): TypedContractEvent<
    MatchJoinedEvent.InputTuple,
    MatchJoinedEvent.OutputTuple,
    MatchJoinedEvent.OutputObject
  >;
  getEvent(
    key: "MatchSettled"
  ): TypedContractEvent<
    MatchSettledEvent.InputTuple,
    MatchSettledEvent.OutputTuple,
    MatchSettledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PrizeClaimed"
  ): TypedContractEvent<
    PrizeClaimedEvent.InputTuple,
    PrizeClaimedEvent.OutputTuple,
    PrizeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RevealWindowStarted"
  ): TypedContractEvent<
    RevealWindowStartedEvent.InputTuple,
    RevealWindowStartedEvent.OutputTuple,
    RevealWindowStartedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ChoicesCommitted(uint256,address,bytes32)": TypedContractEvent<
      ChoicesCommittedEvent.InputTuple,
      ChoicesCommittedEvent.OutputTuple,
      ChoicesCommittedEvent.OutputObject
    >;
    ChoicesCommitted: TypedContractEvent<
      ChoicesCommittedEvent.InputTuple,
      ChoicesCommittedEvent.OutputTuple,
      ChoicesCommittedEvent.OutputObject
    >;

    "ChoicesRevealed(uint256,address,uint8)": TypedContractEvent<
      ChoicesRevealedEvent.InputTuple,
      ChoicesRevealedEvent.OutputTuple,
      ChoicesRevealedEvent.OutputObject
    >;
    ChoicesRevealed: TypedContractEvent<
      ChoicesRevealedEvent.InputTuple,
      ChoicesRevealedEvent.OutputTuple,
      ChoicesRevealedEvent.OutputObject
    >;

    "FeeUpdated(uint16,uint16)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "MatchCancelled(uint256,address,string)": TypedContractEvent<
      MatchCancelledEvent.InputTuple,
      MatchCancelledEvent.OutputTuple,
      MatchCancelledEvent.OutputObject
    >;
    MatchCancelled: TypedContractEvent<
      MatchCancelledEvent.InputTuple,
      MatchCancelledEvent.OutputTuple,
      MatchCancelledEvent.OutputObject
    >;

    "MatchCreated(uint256,address,address,uint128,uint64)": TypedContractEvent<
      MatchCreatedEvent.InputTuple,
      MatchCreatedEvent.OutputTuple,
      MatchCreatedEvent.OutputObject
    >;
    MatchCreated: TypedContractEvent<
      MatchCreatedEvent.InputTuple,
      MatchCreatedEvent.OutputTuple,
      MatchCreatedEvent.OutputObject
    >;

    "MatchJoined(uint256,address,uint64)": TypedContractEvent<
      MatchJoinedEvent.InputTuple,
      MatchJoinedEvent.OutputTuple,
      MatchJoinedEvent.OutputObject
    >;
    MatchJoined: TypedContractEvent<
      MatchJoinedEvent.InputTuple,
      MatchJoinedEvent.OutputTuple,
      MatchJoinedEvent.OutputObject
    >;

    "MatchSettled(uint256,address,uint8,uint8)": TypedContractEvent<
      MatchSettledEvent.InputTuple,
      MatchSettledEvent.OutputTuple,
      MatchSettledEvent.OutputObject
    >;
    MatchSettled: TypedContractEvent<
      MatchSettledEvent.InputTuple,
      MatchSettledEvent.OutputTuple,
      MatchSettledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PrizeClaimed(uint256,address,uint256)": TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;
    PrizeClaimed: TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;

    "RevealWindowStarted(uint256,uint64)": TypedContractEvent<
      RevealWindowStartedEvent.InputTuple,
      RevealWindowStartedEvent.OutputTuple,
      RevealWindowStartedEvent.OutputObject
    >;
    RevealWindowStarted: TypedContractEvent<
      RevealWindowStartedEvent.InputTuple,
      RevealWindowStartedEvent.OutputTuple,
      RevealWindowStartedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
